 const editBlog = async (ele) => {
   var oldValue = ele.parentNode.previousElementSibling.innerHTML;
   var id = ele.id;
   var newTitle = prompt("Enter new title", oldValue);
   if (newTitle !== null) {
     var newDesc = prompt("Enter new description", oldValue);
     if (newDesc !== null) {
       await updateDoc(doc(db, "blogs", id), {
         title: newTitle,
         desc: newDesc,
       });
     }
   } };


   // const editBlog = async (ele) => {
//   const blogId = ele.id;
//   const docSnap = await getDoc(doc(db, "blogs", blogId));
//   // console.log(docSnap.data());
//   let newValue = docSnap.data();
//   // const title = document.getElementById("title");
//   // title.value = newValue.title;
//   // const desc = document.getElementById("desc");
//   // desc.value = newValue.desc;
//   // console.log(newValue);
// };




// const handleEditBLog = async (data, id) => {
//   await updateDoc(doc(db, "blogs", id), data);
//   myModal.hide();
//   await renderBlog();
//   document.getElementById("editBtn").onclick = () =  > createBlog();
//   document.getElementById("closeBtn").onclick = () => myModal.hide();
// };
// const editBlog = async (e) => {
//   // document.getElementById("exampleModalLabelEdit").innerHTML = "Edit Blog";
//   let blogId = e.id;
//   const docSnap = await getDoc(doc(db, "blogs", blogId));
//   // console.log(docSnap);
//   console.log("Document data:", docSnap.data());
//   let newValue = docSnap.data();
//   const title = document.getElementById("title");
//   title.value = newValue.title;
//   const desc = document.getElementById("desc");
//   desc.value = newValue.desc;
//   const isPrivate = document.getElementById("privatePost");
//   isPrivate.checked = newValue.isPrivate;
//   document.getElementById("editBtn").innerHTML = "Edit";
//   document.getElementById("editBtn").onclick = () =>
//     handleEditBLog(
//       {
//         title: title.value,
//         desc: desc.value,
//         isPrivate: isPrivate.checked,
//       },
//       blogId
//     );
//   document.getElementById("closeBtn").onclick = async () => {
//     document.getElementById("editBtn").onclick = () => createBlog();
//     // console.log(document.getElementById("editBtn"));
//     await renderBlog();
//     myModal.hide();
//   };
//   myModal.show();
// };





///own.///



  // const editBtn = document.getElementById("editBtn");
  // editBtn.addEventListener("click", async () => {
  //   const blogId = ele.id;
  //   const docSnap = await getDoc(doc(db, "blogs", blogId));
  //   const newValue = docSnap.data();
  //   const title = document.getElementById("title");
  //   title.value = newValue.title;
  //   const desc = document.getElementById("desc");
  //   desc.value = newValue.desc;

  // console.log(docSnap.data().title);
  // console.log(docSnap.data().desc);
  // console.log(docSnap.data().image);
  // const titleInput = document.getElementById("title");
  // titleInput.value = newValue.title;
  // const descInput = document.getElementById("desc");
  // descInput.value = newValue.desc;
  // const isPrivateInput = document.getElementById("privatePost");
  // isPrivateInput.checked = newValue.isPrivate;
  // });



  chatGpt ///
  const editBlog = async (ele) => {
    let blogId = ele.id;

    const docSnap = await getDoc(doc(db, "blogs", blogId));
    let newValue = docSnap.data();

    const titleEdit = document.getElementById("titleEdit");
    const descEdit = document.getElementById("descEdit");
    const privatePostEdit = document.getElementById("privatePostEdit");
    const blogImageEdit = document.getElementById("blogImageEdit");

    titleEdit.value = newValue.title;
    descEdit.value = newValue.desc;
    privatePostEdit.checked = newValue.isPrivate;

    // Optionally, you can also display the current image if needed
    // blogImageEdit.src = newValue.image;

    const myModal = new bootstrap.Modal(
      document.getElementById("staticBackdrop"),
      {
        keyboard: false,
      }
    );
    myModal.show();
  };

  const updateBlog = async () => {
    const blogImageEdit = document.getElementById("blogImageEdit");
    let imageURL;
    if (blogImageEdit.files[0]) {
      imageURL = await imageUpload(blogImageEdit.files[0]);
    } else {
      imageURL = "https://picsum.photos/200/300";
    }

    const titleEdit = document.getElementById("titleEdit").value;
    const descEdit = document.getElementById("descEdit").value;
    const privatePostEdit = document.getElementById("privatePostEdit").checked;

    const blogId = document.getElementById("exampleModalEdit").dataset.blogId;

    let blogObj = {
      title: titleEdit,
      desc: descEdit,
      image: imageURL,
      isPrivate: privatePostEdit,
    };

    if (!imageURL) {
      imageURL = "https://picsum.photos/200/300";
    }

    await handleEditBlog(blogObj, blogId);

    const myModal = new bootstrap.Modal(
      document.getElementById("exampleModalEdit"),
      {
        keyboard: false,
      }
    );
    myModal.hide();
  };




  async function editBlog(ele) {
  console.log("editBlog ID", ele.id);
  var blogId = ele.id;

  // Fetch the blog data using the blogId
  const blogDoc = await getDoc(doc(db, "blogs", blogId));

  // Extract the data from the document
  const blogData = blogDoc.data();

  // Fill the input fields in the modal with the retrieved data
  document.getElementById("editTitle").value = blogData.tilte;
  document.getElementById("editDesc").value = blogData.desc;
  document.getElementById("editPrivatePost").checked = blogData.isPrivate;

  // Show the modal
  editModal.show();

  // Add a one-time event listener to the "Update" button
  document.getElementById("updateBtn").addEventListener("click", async function () {
    // Update the blog data with the new values
    const updatedData = {
      tilte: document.getElementById("editTitle").value,
      desc: document.getElementById("editDesc").value,
      isPrivate: document.getElementById("editPrivatePost").checked,
    };

    // Check if a new image file has been selected
    const newImageFile = document.getElementById("editBlogImage").files[0];
    if (newImageFile) {
      // Upload the new image and get the download URL
      updatedData.image = await imageUpload(newImageFile);
      updatedData.imageName = newImageFile.name;
    } else {
      // Use the existing image URL if no new image is selected
      updatedData.image = blogData.image;
      updatedData.imageName = blogData.imageName;
    }

    // Update the document in the database
    await updateDoc(doc(db, "blogs", blogId), updatedData);

    // Update the UI
    const existingCard = document.getElementById(blogId);
    if (existingCard) {
      existingCard.innerHTML = renderCardUI(
        updatedData.tilte,
        updatedData.desc,
        updatedData.image,
        blogId,
        updatedData.isPrivate
      );
    }

    // Hide the modal
    editModal.hide();
    console.log("Modal closed");
    window.location.reload()
  }, { once: true });
}